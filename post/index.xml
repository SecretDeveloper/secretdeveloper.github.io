<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on My New Hugo Site</title>
    <link>http://example.org/post/</link>
    <description>Recent content in Posts on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 22 Dec 2016 12:56:02 +0000</lastBuildDate>
    
	<atom:link href="http://example.org/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2016 roundup</title>
      <link>http://example.org/post/2016-roundup/2016-roundup/</link>
      <pubDate>Thu, 22 Dec 2016 12:56:02 +0000</pubDate>
      
      <guid>http://example.org/post/2016-roundup/2016-roundup/</guid>
      <description>So another year draws to a close and I thought I would review the last 12 months in my favourite data struture; lists. Think of this as a far less interesting homage to Fogus yearly reviews.
Books Technical Over the last few years I consume less technical books purely because the content to be found online can be of great quality and books can rarely keep track with the rate of change in tech.</description>
    </item>
    
    <item>
      <title>Javascript Equality Operator Grids</title>
      <link>http://example.org/post/javascript-equality-operator-grids/javascript-equality-operator-grids/</link>
      <pubDate>Tue, 17 Feb 2015 12:52:32 +0000</pubDate>
      
      <guid>http://example.org/post/javascript-equality-operator-grids/javascript-equality-operator-grids/</guid>
      <description>Javascript gets some bad press these days especially over how its comparison operators work.
I decided to extend Craig Gidneys example and added ===, !=, !== &amp;lt;, &amp;lt;=, &amp;gt; and .= comparisons.
Rows are the left side operand and columns are the right.
Source code on jsfiddle</description>
    </item>
    
    <item>
      <title>Directed Graph of hubski users created with D3</title>
      <link>http://example.org/post/hubski-directed-graph-with-d3/hubski-directed-graph-with-d3/</link>
      <pubDate>Tue, 16 Dec 2014 22:34:47 +0000</pubDate>
      
      <guid>http://example.org/post/hubski-directed-graph-with-d3/hubski-directed-graph-with-d3/</guid>
      <description>Using some c# code to scrape hubski.com I was able to produce a pretty basic directed graph showing users follower connections.
Source code on github
Demo version
Advanced Demo version

I started off by scanning a users profile and recording various pieces of information such as: - Age in days - Number of followers - Number of people followed - Number of badges received.
I then looped over each of that users followers and recorded the same information, and then their followers, and then their followers&amp;hellip; you get the idea.</description>
    </item>
    
    <item>
      <title>Data Models, functional composition and validation</title>
      <link>http://example.org/post/data-models-functional-composition-and-validation/</link>
      <pubDate>Tue, 06 Aug 2013 15:03:58 +0100</pubDate>
      
      <guid>http://example.org/post/data-models-functional-composition-and-validation/</guid>
      <description>While I am working my way through the Functional Javascript book I came across something that could be really useful, especially when dealing with AJAX requests.
Functional Composition In a nutshell you start with simple functions that do a single job and then chain them up to perform some larger task. In this example we want to validate that the json being returned from an AJAX call contains the properties we require.</description>
    </item>
    
    <item>
      <title>KnockoutJS demo using Google Books API</title>
      <link>http://example.org/post/knockoutjs-demo-using-google-books-api/</link>
      <pubDate>Sun, 21 Jul 2013 17:03:58 +0100</pubDate>
      
      <guid>http://example.org/post/knockoutjs-demo-using-google-books-api/</guid>
      <description>Knockout.js Introduction A quick and dirty demo to show off a very simple example of what you can do with some knockoutjs code and an AJAX call. I use the google books API to provide a simple search form.
Show me the Code JSFiddle: 
Check out the jsfiddle
I also use the underscore library to work with the observableArray but that is not really a requirement. I just like it.</description>
    </item>
    
    <item>
      <title>Functional javascript using underscore</title>
      <link>http://example.org/post/functional-javascript-using-underscore/</link>
      <pubDate>Sun, 21 Jul 2013 15:03:58 +0100</pubDate>
      
      <guid>http://example.org/post/functional-javascript-using-underscore/</guid>
      <description>Functional javascript using underscore Why? A little while ago I picked up Functional Javascript by Michael Fogus. I&amp;rsquo;m only part way through it and to be honest I should probably have waited until I finished it before starting this post but&amp;hellip;
There is a central theme to this book which intrigued me, indeed its one of the main tenets of functional programming. It can be summed up in this quote: &amp;gt;&amp;ldquo;It is better to have 100 functions operate on one data structure than 10 functions on 10 data structures.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/post/hubski-directed-graph-with-d3/hubski_graph/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/post/hubski-directed-graph-with-d3/hubski_graph/</guid>
      <description>.node {stroke: #fff;stroke-width: 1.5px;}.link {stroke: #999;stroke-opacity: .6;}Find Me!function findNode(){var find = document.getElementById(&#34;txtfind&#34;).value.toLowerCase();var node = d3.select(&#34;#node_&#34;+find);//	node[0][0].r.animVal.value =2000;//node[0][0].attr(&#34;fill&#34;,&#34;#000&#34;);}(function(){var width = 1800,height = 1800;var scaledcolor = d3.scale.category20();var color = function(v){if(v=0 &amp;&amp; v=100 &amp;&amp; v=200 &amp;&amp; v=300 &amp;&amp; v=400 &amp;&amp; v=500 &amp;&amp; v=600 &amp;&amp; v=700 &amp;&amp; v=800 &amp;&amp; v=900 &amp;&amp; v=1000 &amp;&amp; v=1100 &amp;&amp; v=1200 &amp;&amp; v25) nodeMap[d.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/post/hubski-directed-graph-with-d3/hubski_graph_advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/post/hubski-directed-graph-with-d3/hubski_graph_advanced/</guid>
      <description>.node {stroke: #fff;stroke-width: 1.5px;}.link {stroke: #999;stroke-opacity: .6;}User to highlight  Canvas sizeChargeLink DistanceGravityFollowersAgeBadges receivedDraw!Clear </description>
    </item>
    
  </channel>
</rss>