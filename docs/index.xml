<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>SecretDeveloper</title>
        <link>http://localhost:1313/</link>
        <description>SecretDeveloper</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 01 Oct 2025 12:45:00 &#43;0000</lastBuildDate>
            <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>lsv: a Rust powered terminal file browser</title>
    <link>http://localhost:1313/blog/2025-10-01-lsv-a-rust-powered-terminal-file-browser/</link>
    <pubDate>Wed, 01 Oct 2025 12:45:00 &#43;0000</pubDate><author>
        <name>Gary Kenneally</name>
    </author><guid>http://localhost:1313/blog/2025-10-01-lsv-a-rust-powered-terminal-file-browser/</guid>
    <description><![CDATA[<p>I finally snapped after one too many trips through modern file browsers on macOS and Windows. Click. Wait. Tiny target. Modal dialog. Repeat. I spend most of my day in a terminal anyway, so I built something that fits how I actually work.</p>
<p><img class="tw-inline" loading="lazy" src='/lsv.png'   alt="lsv"  ></p>
<p>Say hello to <a href="https://github.com/SecretDeveloper/lsv" target="_blank" rel="noopener noreferrer">lsv</a>.</p>
<ul>
<li>GitHub: <a href="https://github.com/SecretDeveloper/lsv" target="_blank" rel="noopener noreferrer">https://github.com/SecretDeveloper/lsv</a></li>
<li>Crates.io: <a href="https://crates.io/crates/lsv" target="_blank" rel="noopener noreferrer">https://crates.io/crates/lsv</a></li>
</ul>
<h2 id="what-i-wanted" class="headerLink">
    <a href="#what-i-wanted" class="header-mark"></a>What I wanted</h2><ul>
<li>Fly through directories with the keyboard</li>
<li>See a preview of the thing I have selected</li>
<li>Hit a key to run a command I chose</li>
<li>Keep the config in plain text so I can version it and move it across machines</li>
</ul>
<h2 id="what-lsv-is" class="headerLink">
    <a href="#what-lsv-is" class="header-mark"></a>What lsv is</h2><ul>
<li>A small terminal file browser written in Rust, scripted with Lua</li>
<li>Think of it like a fast directory lister that speaks key bindings and previews</li>
<li>Inspired by the excellent <code>lf</code>, but with a setup that matches how I like to glue tools together</li>
</ul>
<h2 id="why-rust-and-lua" class="headerLink">
    <a href="#why-rust-and-lua" class="header-mark"></a>Why Rust and Lua</h2><ul>
<li>I have been learning Rust for a few years and have built some small apps and tools with it, I like the language and it promises increased memory safety which is nice but the real reason is i like the tooling the language comes with, how it manages dependencies, and the cargo system along with crates.io for distribution.</li>
<li>Lua keeps the configuration simple and flexible without writing a plugin system</li>
</ul>
<h2 id="how-i-use-lsv" class="headerLink">
    <a href="#how-i-use-lsv" class="header-mark"></a>How I use lsv</h2><p>You can bind keys to run shell command. <code>e</code> for example might launch the selected file in your <code>$EDITOR</code> or i use <code>t</code> to launch a new tmux pane for the current directory, or <code>gs</code> which is bound to <code>lsv.os_run(&quot;git status -C {current_dir}&quot;)</code> to see the results in a results window.</p>]]></description>
</item><item>
    <title>Porting Asteroids to an ECS with Codex</title>
    <link>http://localhost:1313/blog/2025-10-01-porting-asteroids-to-an-ecs-with-codex/</link>
    <pubDate>Wed, 01 Oct 2025 12:00:00 &#43;0000</pubDate><author>
        <name>Gary Kenneally</name>
    </author><guid>http://localhost:1313/blog/2025-10-01-porting-asteroids-to-an-ecs-with-codex/</guid>
    <description><![CDATA[<p>Quick version: I rewired my <a href="/games/asteroids/" rel="">Asteroids</a> clone from a pile of classes to an Entity‑Component‑System (ECS). Codex (the CLI agent) did the heavy lifting while I poked, prodded, and occasionally muttered at my screen. The end result is cleaner, easier to extend, and less brittle when I add toys like missiles and sparkly shields.</p>
<p>Why bother with ECS?</p>
<ul>
<li>I was done fighting class hierarchies. I just want to slap “has a shield,” “spins,” or “is a missile” onto things without negotiating with a base class.</li>
<li>Data is data, behavior is behavior. Components hold state; systems do the work over sets of components.</li>
<li>(maybe) Performance as a side effect: tight loops over similar data are fast, but honestly the clarity is what sold me.</li>
<li>New features become “add a component, tweak a system,” not surgery across five files.</li>
</ul>
<p>Where I started (a.k.a. the creaky bits)</p>]]></description>
</item><item>
    <title>Using gpt-oss-20b to Build Asteroids and Breakout</title>
    <link>http://localhost:1313/blog/2025-08-09-using-gpt-oss-20b-to-build-asteroids-and-breakout/</link>
    <pubDate>Sat, 09 Aug 2025 12:00:00 &#43;0000</pubDate><author>
        <name>Gary Kenneally</name>
    </author><guid>http://localhost:1313/blog/2025-08-09-using-gpt-oss-20b-to-build-asteroids-and-breakout/</guid>
    <description><![CDATA[<p>In this post I explore how to use <strong>gpt-oss-20b</strong>, an open source 20-billion parameter language model, to prototype two classic browser games: Asteroids and Breakout. By iterating on prompts and refining the output, I generated working HTML5 Canvas implementations in around an hour or so.</p>
<h4 id="about-gpt-oss-20b" class="headerLink">
    <a href="#about-gpt-oss-20b" class="header-mark"></a>About gpt-oss-20b</h4><p>gpt-oss-20b is an open-source 20-billion parameter transformer-based language model released by OpenAI under the Apache 2.0 license. It is based on the GPT-4 architecture scaled to 20B parameters, trained on a diverse mix of web text, code, and documents.</p>]]></description>
</item><item>
    <title>Memento Mori</title>
    <link>http://localhost:1313/blog/2020-11-26-memento-mori/</link>
    <pubDate>Thu, 26 Nov 2020 10:17:14 &#43;0000</pubDate><author>
        <name>Gary Kenneally</name>
    </author><guid>http://localhost:1313/blog/2020-11-26-memento-mori/</guid>
    <description><![CDATA[<blockquote>
  <p>&ldquo;Let us prepare our minds as if we’d come to the very end of life. Let us postpone nothing. Let us balance
    life’s books each day. … The one who puts the finishing touches on their life each day is never short of
    time.&rdquo;</p>
  <br />
  <em>Seneca</em>
</blockquote>

<p>I have read some stoic philosophy recently and one of the ideas it presents is the awareness of death, not in a
  morbid sense, but as something we should remain aware of. Time passes, often without notice when we are busy in the
  day to day living, but stoics such as <a href="https://en.wikipedia.org/wiki/Marcus_Aurelius" target="_new">Marcus
    Aurelius</a>
  believed it was
  important to acknowledge that your life span is finite and to act accordingly; use it as a call to action.</p>]]></description>
</item><item>
    <title>Software Architecture</title>
    <link>http://localhost:1313/blog/2018-10-05-software-architecture/</link>
    <pubDate>Fri, 05 Oct 2018 15:01:32 &#43;0100</pubDate><author>
        <name>Gary Kenneally</name>
    </author><guid>http://localhost:1313/blog/2018-10-05-software-architecture/</guid>
    <description><![CDATA[<h1 id="what-is-software-architecture" class="headerLink">
    <a href="#what-is-software-architecture" class="header-mark"></a>What is software architecture?</h1><p>It depends. Everyone in IT asks this question at some point and the answer they get is a mixed bag depending on who tries to answer it. So to deepen the general state of confusion I thought I would add yet another definition.</p>
<h2 id="what-is-a-software-architect" class="headerLink">
    <a href="#what-is-a-software-architect" class="header-mark"></a>What IS a Software Architect?</h2><p>It depends.
I think of Software architects as “Master builders”. They may not have the title &ldquo;Architect&rdquo; but they are doing most of the following:</p>]]></description>
</item><item>
    <title>On the Design of Small Things</title>
    <link>http://localhost:1313/blog/2018-09-27-on-the-design-of-small-things/</link>
    <pubDate>Thu, 27 Sep 2018 14:32:02 &#43;0100</pubDate><author>
        <name>Gary Kenneally</name>
    </author><guid>http://localhost:1313/blog/2018-09-27-on-the-design-of-small-things/</guid>
    <description><![CDATA[<blockquote>
  <p>Those who do not understand UNIX are condemned to reinvent it, poorly.<br />
<em>Henry Spencer</em></p>
</blockquote><p>The following is from the wikipedia article on <a href="https://en.wikipedia.org/wiki/Unix_philosophy" target="_blank" rel="noopener noreferrer">Unix Philosophy</a>.  It is interesting to apply these rules when designing Microservices, there is significant overlap.  Unix did it first.</p>
<p>In his book, The Art of Unix Programming that was first published in 2003, Eric S. Raymond, an American programmer and open source advocate, summarizes the Unix philosophy as KISS Principle of &ldquo;Keep it Simple, Stupid.&rdquo; He provides a series of design rules:</p>]]></description>
</item><item>
    <title>2016 Round-Up</title>
    <link>http://localhost:1313/blog/2016-12-22-2016-round-up/</link>
    <pubDate>Thu, 22 Dec 2016 12:56:02 &#43;0000</pubDate><author>
        <name>Gary Kenneally</name>
    </author><guid>http://localhost:1313/blog/2016-12-22-2016-round-up/</guid>
    <description><![CDATA[<p>So another year draws to a close and I thought I would review the last 12 months in my favourite data struture; lists.  Think of this as a far less interesting homage to <a href="http://blog.fogus.me/2015/12/29/the-best-things-and-stuff-of-2015/" target="_blank" rel="noopener noreferrer">Fogus</a> yearly reviews.</p>
<h2 id="books" class="headerLink">
    <a href="#books" class="header-mark"></a>Books</h2><h3 id="technical" class="headerLink">
    <a href="#technical" class="header-mark"></a>Technical</h3><p>Over the last few years I consume less technical books purely because the content to be found online can be of great quality and books can rarely keep track with the rate of change in tech.  Usually if I am reading a tech book its of a more abstract or fundamental topic rather than specific to a language and is therefore a longer living.</p>]]></description>
</item><item>
    <title>Software, Estimation and the Planning Fallacy</title>
    <link>http://localhost:1313/blog/2016-10-14-software-estimation-and-the-planning-fallacy/</link>
    <pubDate>Fri, 14 Oct 2016 12:54:47 &#43;0000</pubDate><author>
        <name>Gary Kenneally</name>
    </author><guid>http://localhost:1313/blog/2016-10-14-software-estimation-and-the-planning-fallacy/</guid>
    <description><![CDATA[<p>My flight is delayed for 3 hours so I&rsquo;m taking the rare opportunity to put together some thoughts on how software project estimation can trip companies, teams and individuals up.</p>
<h2 id="waterfall" class="headerLink">
    <a href="#waterfall" class="header-mark"></a>Waterfall</h2><p>Remember way back when everyone thought the Waterfall model was great?  Well actually no, for the most part they didnt. The Waterfall model was put forward by Winston Royce back in the early 70&rsquo;s as an example of a <em>broken</em> SDLC model.  Unfortunately this little note was lost in the scramble to adopt it as the de-facto model to use.  Now what is interesting to me is its original creator could see that the waterall model contained flaws, but thousands  of people could either not see those same flaws, or were unable to cease its adoption even if they tried; I&rsquo;m not sure which of those is worse.  30 years later you would be hard pressed to find any organizations still working under a Waterfall model, which is good.  The real problem however is not that a mistake was made, its that it took a generation before we acknowledged there was a problem.</p>]]></description>
</item><item>
    <title>Javascript Equality Operator Grids</title>
    <link>http://localhost:1313/blog/2015-02-17-javascript-equality-operator-grids/</link>
    <pubDate>Tue, 17 Feb 2015 12:52:32 &#43;0000</pubDate><author>
        <name>Gary Kenneally</name>
    </author><guid>http://localhost:1313/blog/2015-02-17-javascript-equality-operator-grids/</guid>
    <description><![CDATA[<p>Javascript gets some bad press these days especially over how its comparison operators work.</p>
<p>I decided to extend <a href="http://strilanc.com/visualization/2014/03/27/Better-JS-Equality-Table.html" target="_blank" rel="noopener noreferrer">Craig Gidneys</a> example and added ===, !=, !== &lt;, &lt;=, &gt; and .= comparisons.</p>
<p>Rows are the left side operand and columns are the right.</p>
<p><a href="https://jsfiddle.net/SecretDeveloper/1zywbpLL/" target="_blank" rel="noopener noreferrer">Source code on jsfiddle</a></p>
<img src="/blog/2015-02-17-javascript-equality-operator-grids/js_equality.png" title="JS equality operator grids" />]]></description>
</item><item>
    <title>Directed Graph of hubski users created with D3</title>
    <link>http://localhost:1313/blog/2014-12-16-directed-graph-of-hubski-users-created-with-d3/</link>
    <pubDate>Tue, 16 Dec 2014 22:34:47 &#43;0000</pubDate><author>
        <name>Gary Kenneally</name>
    </author><guid>http://localhost:1313/blog/2014-12-16-directed-graph-of-hubski-users-created-with-d3/</guid>
    <description><![CDATA[<p>Using some c# code to scrape hubski.com I was able to produce a pretty basic directed graph showing users follower connections.</p>
<p><a href="https://github.com/SecretDeveloper/SocialGraph" target="_blank" rel="noopener noreferrer">Source code on github</a></p>
<p><a href="../../projects/hubski-socialgraph/hubski_graph.html" rel="">Demo version</a></p>
<p><a href="../../projects/hubski-socialgraph/hubski_graph_advanced.html" rel="">Advanced Demo version</a></p>
<p><a href="../../projects/hubski-socialgraph/hubski_graph.html" rel="">Hubski Social Graph</a></p>
<p>I started off by scanning a users profile and recording various pieces of information such as:</p>
<ul>
<li>Age in days</li>
<li>Number of followers</li>
<li>Number of people followed</li>
<li>Number of badges received.</li>
</ul>
<p>I then looped over each of that users followers and recorded the same information,  and then their followers, and then their followers&hellip;  you get the idea.</p>]]></description>
</item></channel>
</rss>
