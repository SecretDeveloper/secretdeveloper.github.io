<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Games - Category - SecretDeveloper</title>
        <link>https://secretdeveloper.github.io/categories/games/</link>
        <description>Games - Category - SecretDeveloper</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 01 Oct 2025 12:00:00 &#43;0000</lastBuildDate><atom:link href="https://secretdeveloper.github.io/categories/games/" rel="self" type="application/rss+xml" /><item>
    <title>Porting Asteroids to an ECS with Codex</title>
    <link>https://secretdeveloper.github.io/blog/2025-10-01-porting-asteroids-to-an-ecs-with-codex/</link>
    <pubDate>Wed, 01 Oct 2025 12:00:00 &#43;0000</pubDate><author>
        <name>Gary Kenneally</name>
    </author><guid>https://secretdeveloper.github.io/blog/2025-10-01-porting-asteroids-to-an-ecs-with-codex/</guid>
    <description><![CDATA[<p>Quick version: I rewired my <a href="/games/asteroids/" rel="">Asteroids</a> clone from a pile of classes to an Entity‑Component‑System (ECS). Codex (the CLI agent) did the heavy lifting while I poked, prodded, and occasionally muttered at my screen. The end result is cleaner, easier to extend, and less brittle when I add toys like missiles and sparkly shields.</p>
<p>Why bother with ECS?</p>
<ul>
<li>I was done fighting class hierarchies. I just want to slap “has a shield,” “spins,” or “is a missile” onto things without negotiating with a base class.</li>
<li>Data is data, behavior is behavior. Components hold state; systems do the work over sets of components.</li>
<li>(maybe) Performance as a side effect: tight loops over similar data are fast, but honestly the clarity is what sold me.</li>
<li>New features become “add a component, tweak a system,” not surgery across five files.</li>
</ul>
<p>Where I started (a.k.a. the creaky bits)</p>]]></description>
</item><item>
    <title>Using gpt-oss-20b to Build Asteroids and Breakout</title>
    <link>https://secretdeveloper.github.io/blog/2025-08-09-using-gpt-oss-20b-to-build-asteroids-and-breakout/</link>
    <pubDate>Sat, 09 Aug 2025 12:00:00 &#43;0000</pubDate><author>
        <name>Gary Kenneally</name>
    </author><guid>https://secretdeveloper.github.io/blog/2025-08-09-using-gpt-oss-20b-to-build-asteroids-and-breakout/</guid>
    <description><![CDATA[<p>In this post I explore how to use <strong>gpt-oss-20b</strong>, an open source 20-billion parameter language model, to prototype two classic browser games: Asteroids and Breakout. By iterating on prompts and refining the output, I generated working HTML5 Canvas implementations in around an hour or so.</p>
<h4 id="about-gpt-oss-20b" class="headerLink">
    <a href="#about-gpt-oss-20b" class="header-mark"></a>About gpt-oss-20b</h4><p>gpt-oss-20b is an open-source 20-billion parameter transformer-based language model released by OpenAI under the Apache 2.0 license. It is based on the GPT-4 architecture scaled to 20B parameters, trained on a diverse mix of web text, code, and documents.</p>]]></description>
</item></channel>
</rss>
