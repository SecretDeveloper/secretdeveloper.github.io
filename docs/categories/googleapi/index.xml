<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Googleapi - Category - SecretDeveloper</title>
        <link>http://localhost:1313/categories/googleapi/</link>
        <description>Googleapi - Category - SecretDeveloper</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 21 Jul 2013 17:03:58 &#43;0100</lastBuildDate><atom:link href="http://localhost:1313/categories/googleapi/" rel="self" type="application/rss+xml" /><item>
    <title>KnockoutJS demo using Google Books API</title>
    <link>http://localhost:1313/blog/2013-07-21-knockoutjs-demo-using-google-books-api/</link>
    <pubDate>Sun, 21 Jul 2013 17:03:58 &#43;0100</pubDate><author>
        <name>Gary Kenneally</name>
    </author><guid>http://localhost:1313/blog/2013-07-21-knockoutjs-demo-using-google-books-api/</guid>
    <description><![CDATA[<h1 id="knockoutjs" class="headerLink">
    <a href="#knockoutjs" class="header-mark"></a>Knockout.js</h1><h3 id="introduction" class="headerLink">
    <a href="#introduction" class="header-mark"></a>Introduction</h3><p>A quick and dirty demo to show off a very simple example of what you can do with some knockoutjs code and an AJAX call.  I use the google books API to provide a simple search form.</p>
<h3 id="show-me-the-code" class="headerLink">
    <a href="#show-me-the-code" class="header-mark"></a>Show me the Code</h3><p>JSFiddle:</p>
<iframe width="100%" height="400" src="http://jsfiddle.net/SecretDeveloper/d9xfP/embedded/" frameborder="0"> </iframe>
<p>Check out the <a href="http://jsfiddle.net/SecretDeveloper/d9xfP/embedded/result/" target="_blank" rel="noopener noreferrer">jsfiddle</a></p>
<p>I also use the <a href="http://underscorejs.org/" target="_blank" rel="noopener noreferrer">underscore</a> library to work with the observableArray but that is not really a requirement.  I just like it.</p>
<h3 id="so-whats-happening" class="headerLink">
    <a href="#so-whats-happening" class="header-mark"></a>So whats happening?</h3><p>We start off by creating a simple html page that contains a text box, a button and a results list. In our javascript file we create a ViewModel object (function) that contains properties that match our html form. It has a field for searchInput, a function to handle searches etc.  In our document ready function we apply this ViewModel to our html using <code>ko.applyBindings(vm);</code>.  When we do this knockoutjs takes our html and resolves all the <code>data-bind=&quot;&quot;</code> attributes we have added to elements and resolves them to fields on our ViewModel.  This is called Model Binding and it is a powerful tool that allows us to have a single ViewModel property displayed in several places on a page, with each kept in sync to any changes.  If the field we are binding to is a <code>ko.observable</code> then any changes made to its value will immediately show wherever it is bound.</p>]]></description>
</item></channel>
</rss>
